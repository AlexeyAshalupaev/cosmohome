#!/usr/bin/env python

import argparse
from boinc2docker_create_work import boinc2docker_create_work
import boinc_path_config
from Boinc.create_work import add_create_work_args, read_create_work_args


create_work_args = {
    'target_nresults': 1,
    'max_error_results': 3,
    'max_success_results': 3,
    'max_total_results': 3,
    'min_quorum': 1,
    'priority': 2,
    #                 MIPS/CPU*NCPUS * 3m25s/100 steps * 1500 steps
    'rsc_fpops_est' : 3649e6  * 4    * (3*60+25)/100   * 1500,
    'rsc_disk_bound': 5e8,
    'additional_xml':'<credit>50</credit>'
}
create_work_args['rsc_fpops_bound'] = create_work_args['rsc_fpops_est']*20


if __name__ == '__main__':

    parser = argparse.ArgumentParser(prog='lsplitsims_create_work')
    parser.add_argument('--lslices', help='list of lslices')
    parser.add_argument('image', help='image to run')
    parser.add_argument('seeds', help='list of seeds')
    add_create_work_args(parser)
    args = parser.parse_args()

    seeds = eval(args.seeds)
    if args.lslices is None:
        lslices = []
        for lsplit in range(100,2500,50)+[2509]:
            if lsplit<1700: lslices.append((lsplit,2509))
            for lmin in (2,30):
                if lsplit>=650: lslices.append((lmin,lsplit))
    else:
        lslices = eval(args.lslices)
    create_work_args.update(read_create_work_args(args))

    for seed in seeds:
        for lslice in lslices:
            create_work_args['wu_name'] = 'planck_param_sims_%i_%i_%s'%(lslice[0],lslice[1],seed)
            boinc2docker_create_work(appname='lsplitsims',
                                     image=args.image,
                                     command=['--lslices',"[(%i,%i)]"%lslice,
                                              '--seeds','[%i]'%seed,
                                              '--progress','1500'],
                                     create_work_args=create_work_args)
            print (seed,lslice)
