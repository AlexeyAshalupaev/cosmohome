#!/usr/bin/env python

import argparse
import signal
from itertools import repeat
from multiprocessing import Pool

import boinc_path_config
from Boinc import database as db
from boinc2docker_create_work import boinc2docker_create_work
from Boinc.create_work import add_create_work_args, read_create_work_args

create_work_args = {
    'target_nresults': 1,
    'max_error_results': 3,
    'max_success_results': 3,
    'max_total_results': 3,
    'min_quorum': 1,
    'priority': 2,
    #                 MIPS/CPU*NCPUS * 3m25s/100 steps * 1500 steps
    'rsc_fpops_est' : 3649e6  * 4    * (3*60+25)/100   * 1500,
    'rsc_disk_bound': 5e8,
    'additional_xml':'<credit>50</credit>',
}
create_work_args['rsc_fpops_bound'] = create_work_args['rsc_fpops_est']*20
vbox_job_xml = [
    {'fraction_done_filename': 'progress'},
    'disable_automatic_checkpoints', 
]
memory = 2048



if __name__ == '__main__':

    parser = argparse.ArgumentParser(prog='lsplitsims_create_work')
    parser.add_argument('--lslices', help='list of lslices')
    parser.add_argument('--lowtau', action='store_true', help='use low tau fiducial model and prior')
    parser.add_argument('--sampletau', action='store_true', help='sample the tau prior')
    parser.add_argument('--nthreads', default=1, type=int, help='number of threads to use for submitting work')
    parser.add_argument('image', help='image to run')
    parser.add_argument('seeds', help='list of seeds')
    add_create_work_args(parser)
    args = parser.parse_args()

    seeds = eval(args.seeds)
    if args.lslices is None:
        lslices = []
        for lsplit in range(100,2500,50)+[2509]:
            if lsplit<1700: lslices.append((lsplit,2509))
            for lmin in (2,30):
                if lsplit>=650: lslices.append((lmin,lsplit))
    else:
        lslices = eval(args.lslices)
    create_work_args.update(read_create_work_args(args))

    db.connect()
    app = db.Apps.find1(name="lsplitsims")

    def creatework((seed,lslice)):
        signal.signal(signal.SIGINT, lambda: sys.exit())
        
        #pick unique workunit name
        for i in range(100):
            name = create_work_args['wu_name'] = 'planck_param_sims_%i_%i_%s_%i'%(lslice[0],lslice[1],seed,i)
            if not db.Workunits.find(app=app,name=name): break

        command = ['--lslices',"[(%i,%i)]"%lslice,
                   '--seeds','[%i]'%seed,
                   '--progress','1500']
        if args.lowtau:
            command += ['--fid','fid_tau0.055.txt',
                        '--tau','(0.055,0.01)']
        if args.sampletau:
            command += ['--sampletau']
        try:
            boinc2docker_create_work(appname='lsplitsims',
                                     image=args.image,
                                     command=command,
                                     memory=memory,
                                     vbox_job_xml=vbox_job_xml,
                                     create_work_args=create_work_args)
        except Exception as e:
            print(e)
            pass
        print (seed,lslice)
               
               
    pool = Pool(args.nthreads)
    for seed in seeds:
        pool.map(creatework,zip(repeat(seed),lslices))
