#!/usr/bin/env python

import sys
sys.path.append('../bin')
import boinc_path_config
from Boinc.work_generator import WorkGenerator, check_output
import os.path as osp
from ConfigParser import RawConfigParser
from cStringIO import StringIO
from hashlib import md5
import tarfile
import cPickle as pickle
from numpy import cov, dot
from numpy.random import randint, randn
from numpy.linalg import cholesky


if __name__ == '__main__':


    def read_ini(inifile):
        config = RawConfigParser()
        config.optionxform=str
        ini=open(inifile).read()
        config.readfp(StringIO('[root]\n'+ini))
        return dict(config.items('root'))


    class MyWorkGenerator(WorkGenerator):

        def __init__(self,*args,**kwargs):
            super(MyWorkGenerator,self).__init__(*args,**kwargs)
            self.samp_names, self.samp_dat = pickle.load(open(osp.join(self.args['params_dir'][0],'params_samples.dat')))


        def add_args(self,parser):
            parser.add_argument('--params_dir',nargs=1,default=['params'],type=str,help='directory which has base parameter files')
            parser.add_argument('--fuzz_factor',nargs=1,default=[0.1],type=float,help='how much to fuzz random samples by')
            parser.add_argument('--create_work_args',nargs=1,default=[''],type=str,help='args to send to bin/create_work')

        def make_jobs(self,num=1):
            for _ in range(num):
                params = self.gen_new_params()
                param_file_name = '%s__%s.tgz'%(self.appname,md5(str(params)).hexdigest())

                download_path = check_output(['../bin/dir_hier_path',param_file_name]).strip()

                with tarfile.open(download_path,"w:gz") as tgz:
                    #add progress_template
                    tgz.add(osp.join(self.args['params_dir'][0],'progress_template'),arcname='progress_template')
                    #add params.ini
                    data = '\n'.join(['%s = %s'%(k,v) for k,v in params.items()])
                    tarinfo = tarfile.TarInfo('params.ini')
                    tarinfo.size = len(data)
                    tgz.addfile(tarinfo,fileobj=StringIO(data))

                check_output(['bin/stage_file', '--copy',
                              'apps_boinc2docker/camb/camb_boinc2docker_boinc_app'],cwd='..')

                check_output((['bin/create_work','--appname',self.appname]+
                               self.args['create_work_args'][0].split()+
                               ['camb_boinc2docker_boinc_app',param_file_name]),cwd='..')

        def gen_new_params(self):
            params = read_ini(osp.join(self.args['params_dir'][0],'params_base.ini'))
            while True:
                s = (self.samp_dat[randint(0,self.samp_dat.shape[0])] + 
                     dot(randn(len(self.samp_names))*self.args['fuzz_factor'][0],cholesky(cov(self.samp_dat.T)).T))
                if all(s>self.samp_dat.min(axis=0)) and all(s<self.samp_dat.max(axis=0)): break
            return dict(params,**dict(zip(self.samp_names,s)))

            return dict(config.items('root'))

    MyWorkGenerator(appname='camb_boinc2docker').run()
